{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/hydra-news/typescript/src/components/verification/VerificationScore.tsx\";\nimport React from 'react';\nimport './VerificationScore.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * Component to display a verification score as a circular gauge\n */\nconst VerificationScore = ({\n  score,\n  size = 'medium',\n  showLabel = true,\n  className = ''\n}) => {\n  // Normalize score to 0-100 range\n  const normalizedScore = Math.max(0, Math.min(100, Math.round(score * 100)));\n\n  // Calculate SVG parameters based on size\n  const dimensions = {\n    small: {\n      size: 40,\n      strokeWidth: 4,\n      fontSize: 12\n    },\n    medium: {\n      size: 80,\n      strokeWidth: 6,\n      fontSize: 24\n    },\n    large: {\n      size: 120,\n      strokeWidth: 8,\n      fontSize: 36\n    }\n  };\n  const {\n    size: sizeValue,\n    strokeWidth,\n    fontSize\n  } = dimensions[size];\n  const radius = (sizeValue - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference * (1 - normalizedScore / 100);\n\n  // Determine color based on score\n  const getColor = () => {\n    if (normalizedScore >= 80) return '#4CAF50'; // Green\n    if (normalizedScore >= 60) return '#8BC34A'; // Light Green\n    if (normalizedScore >= 40) return '#FFC107'; // Amber\n    if (normalizedScore >= 20) return '#FF9800'; // Orange\n    return '#F44336'; // Red\n  };\n\n  // Get label text based on score\n  const getLabel = () => {\n    if (normalizedScore >= 80) return 'Verified';\n    if (normalizedScore >= 60) return 'Likely True';\n    if (normalizedScore >= 40) return 'Uncertain';\n    if (normalizedScore >= 20) return 'Questionable';\n    return 'Disputed';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `verification-score ${size} ${className}`,\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      width: sizeValue,\n      height: sizeValue,\n      viewBox: `0 0 ${sizeValue} ${sizeValue}`,\n      className: \"verification-score-svg\",\n      children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: sizeValue / 2,\n        cy: sizeValue / 2,\n        r: radius,\n        fill: \"transparent\",\n        stroke: \"#e6e6e6\",\n        strokeWidth: strokeWidth\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"circle\", {\n        cx: sizeValue / 2,\n        cy: sizeValue / 2,\n        r: radius,\n        fill: \"transparent\",\n        stroke: getColor(),\n        strokeWidth: strokeWidth,\n        strokeDasharray: circumference,\n        strokeDashoffset: strokeDashoffset,\n        strokeLinecap: \"round\",\n        transform: `rotate(-90 ${sizeValue / 2} ${sizeValue / 2})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        x: \"50%\",\n        y: \"50%\",\n        dy: \".35em\",\n        textAnchor: \"middle\",\n        fill: getColor(),\n        fontSize: fontSize,\n        fontWeight: \"bold\",\n        children: normalizedScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), showLabel && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-label\",\n      style: {\n        color: getColor()\n      },\n      children: getLabel()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c = VerificationScore;\nexport default VerificationScore;\nvar _c;\n$RefreshReg$(_c, \"VerificationScore\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","VerificationScore","score","size","showLabel","className","normalizedScore","Math","max","min","round","dimensions","small","strokeWidth","fontSize","medium","large","sizeValue","radius","circumference","PI","strokeDashoffset","getColor","getLabel","children","width","height","viewBox","cx","cy","r","fill","stroke","fileName","_jsxFileName","lineNumber","columnNumber","strokeDasharray","strokeLinecap","transform","x","y","dy","textAnchor","fontWeight","style","color","_c","$RefreshReg$"],"sources":["/home/ubuntu/hydra-news/typescript/src/components/verification/VerificationScore.tsx"],"sourcesContent":["import React from 'react';\nimport './VerificationScore.css';\n\ninterface VerificationScoreProps {\n  score: number;\n  size?: 'small' | 'medium' | 'large';\n  showLabel?: boolean;\n  className?: string;\n}\n\n/**\n * Component to display a verification score as a circular gauge\n */\nconst VerificationScore: React.FC<VerificationScoreProps> = ({\n  score,\n  size = 'medium',\n  showLabel = true,\n  className = '',\n}) => {\n  // Normalize score to 0-100 range\n  const normalizedScore = Math.max(0, Math.min(100, Math.round(score * 100)));\n  \n  // Calculate SVG parameters based on size\n  const dimensions = {\n    small: { size: 40, strokeWidth: 4, fontSize: 12 },\n    medium: { size: 80, strokeWidth: 6, fontSize: 24 },\n    large: { size: 120, strokeWidth: 8, fontSize: 36 },\n  };\n  \n  const { size: sizeValue, strokeWidth, fontSize } = dimensions[size];\n  const radius = (sizeValue - strokeWidth) / 2;\n  const circumference = 2 * Math.PI * radius;\n  const strokeDashoffset = circumference * (1 - normalizedScore / 100);\n  \n  // Determine color based on score\n  const getColor = () => {\n    if (normalizedScore >= 80) return '#4CAF50'; // Green\n    if (normalizedScore >= 60) return '#8BC34A'; // Light Green\n    if (normalizedScore >= 40) return '#FFC107'; // Amber\n    if (normalizedScore >= 20) return '#FF9800'; // Orange\n    return '#F44336'; // Red\n  };\n  \n  // Get label text based on score\n  const getLabel = () => {\n    if (normalizedScore >= 80) return 'Verified';\n    if (normalizedScore >= 60) return 'Likely True';\n    if (normalizedScore >= 40) return 'Uncertain';\n    if (normalizedScore >= 20) return 'Questionable';\n    return 'Disputed';\n  };\n  \n  return (\n    <div className={`verification-score ${size} ${className}`}>\n      <svg\n        width={sizeValue}\n        height={sizeValue}\n        viewBox={`0 0 ${sizeValue} ${sizeValue}`}\n        className=\"verification-score-svg\"\n      >\n        {/* Background circle */}\n        <circle\n          cx={sizeValue / 2}\n          cy={sizeValue / 2}\n          r={radius}\n          fill=\"transparent\"\n          stroke=\"#e6e6e6\"\n          strokeWidth={strokeWidth}\n        />\n        \n        {/* Progress circle */}\n        <circle\n          cx={sizeValue / 2}\n          cy={sizeValue / 2}\n          r={radius}\n          fill=\"transparent\"\n          stroke={getColor()}\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={strokeDashoffset}\n          strokeLinecap=\"round\"\n          transform={`rotate(-90 ${sizeValue / 2} ${sizeValue / 2})`}\n        />\n        \n        {/* Score text */}\n        <text\n          x=\"50%\"\n          y=\"50%\"\n          dy=\".35em\"\n          textAnchor=\"middle\"\n          fill={getColor()}\n          fontSize={fontSize}\n          fontWeight=\"bold\"\n        >\n          {normalizedScore}\n        </text>\n      </svg>\n      \n      {showLabel && <div className=\"verification-label\" style={{ color: getColor() }}>{getLabel()}</div>}\n    </div>\n  );\n};\n\nexport default VerificationScore;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}