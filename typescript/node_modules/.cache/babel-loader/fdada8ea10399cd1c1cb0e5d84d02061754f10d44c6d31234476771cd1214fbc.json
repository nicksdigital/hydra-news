{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/hydra-news/typescript/src/components/verification/VerificationStatusIndicator.tsx\";\nimport React from 'react';\nimport './VerificationStatusIndicator.css';\nimport VerificationScore from './VerificationScore';\nimport { verificationLevels, VerificationLevel } from '../../types/NewsContent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * Component to display verification status with detailed information\n */\nconst VerificationStatusIndicator = ({\n  score,\n  level,\n  size = 'medium',\n  showDetails = true,\n  className = '',\n  onClick\n}) => {\n  // Determine verification level from score if not provided\n  const getVerificationLevel = () => {\n    if (level !== undefined) return level;\n    if (score === undefined) return VerificationLevel.None;\n    if (score >= 0.9) return VerificationLevel.Maximum;\n    if (score >= 0.7) return VerificationLevel.High;\n    if (score >= 0.5) return VerificationLevel.Standard;\n    if (score >= 0.3) return VerificationLevel.Minimal;\n    return VerificationLevel.None;\n  };\n  const verificationLevel = getVerificationLevel();\n  const levelInfo = verificationLevels.find(l => l.level === verificationLevel) || verificationLevels[0];\n\n  // Determine if this is clickable\n  const isClickable = !!onClick;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `verification-status-indicator ${size} ${className} ${isClickable ? 'clickable' : ''}`,\n    onClick: onClick,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-status-header\",\n      children: [score !== undefined ? /*#__PURE__*/_jsxDEV(VerificationScore, {\n        score: score,\n        size: size,\n        showLabel: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-level-badge\",\n        style: {\n          backgroundColor: levelInfo.color\n        },\n        children: levelInfo.level\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-level-name\",\n        style: {\n          color: levelInfo.color\n        },\n        children: levelInfo.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), showDetails && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"verification-status-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"verification-level-description\",\n        children: levelInfo.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), score !== undefined && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"verification-score-text\",\n        children: [\"Verification Score: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: levelInfo.color\n          },\n          children: [Math.round(score * 100), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c = VerificationStatusIndicator;\nexport default VerificationStatusIndicator;\nvar _c;\n$RefreshReg$(_c, \"VerificationStatusIndicator\");","map":{"version":3,"names":["React","VerificationScore","verificationLevels","VerificationLevel","jsxDEV","_jsxDEV","VerificationStatusIndicator","score","level","size","showDetails","className","onClick","getVerificationLevel","undefined","None","Maximum","High","Standard","Minimal","verificationLevel","levelInfo","find","l","isClickable","children","showLabel","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundColor","color","name","description","Math","round","_c","$RefreshReg$"],"sources":["/home/ubuntu/hydra-news/typescript/src/components/verification/VerificationStatusIndicator.tsx"],"sourcesContent":["import React from 'react';\nimport './VerificationStatusIndicator.css';\nimport VerificationScore from './VerificationScore';\nimport { verificationLevels, VerificationLevel } from '../../types/NewsContent';\n\ninterface VerificationStatusIndicatorProps {\n  score?: number;\n  level?: VerificationLevel;\n  size?: 'small' | 'medium' | 'large';\n  showDetails?: boolean;\n  className?: string;\n  onClick?: () => void;\n}\n\n/**\n * Component to display verification status with detailed information\n */\nconst VerificationStatusIndicator: React.FC<VerificationStatusIndicatorProps> = ({\n  score,\n  level,\n  size = 'medium',\n  showDetails = true,\n  className = '',\n  onClick,\n}) => {\n  // Determine verification level from score if not provided\n  const getVerificationLevel = (): VerificationLevel => {\n    if (level !== undefined) return level;\n    \n    if (score === undefined) return VerificationLevel.None;\n    \n    if (score >= 0.9) return VerificationLevel.Maximum;\n    if (score >= 0.7) return VerificationLevel.High;\n    if (score >= 0.5) return VerificationLevel.Standard;\n    if (score >= 0.3) return VerificationLevel.Minimal;\n    return VerificationLevel.None;\n  };\n  \n  const verificationLevel = getVerificationLevel();\n  const levelInfo = verificationLevels.find(l => l.level === verificationLevel) || verificationLevels[0];\n  \n  // Determine if this is clickable\n  const isClickable = !!onClick;\n  \n  return (\n    <div \n      className={`verification-status-indicator ${size} ${className} ${isClickable ? 'clickable' : ''}`}\n      onClick={onClick}\n    >\n      <div className=\"verification-status-header\">\n        {score !== undefined ? (\n          <VerificationScore \n            score={score} \n            size={size} \n            showLabel={false}\n          />\n        ) : (\n          <div \n            className=\"verification-level-badge\"\n            style={{ backgroundColor: levelInfo.color }}\n          >\n            {levelInfo.level}\n          </div>\n        )}\n        \n        <div className=\"verification-level-name\" style={{ color: levelInfo.color }}>\n          {levelInfo.name}\n        </div>\n      </div>\n      \n      {showDetails && (\n        <div className=\"verification-status-details\">\n          <p className=\"verification-level-description\">\n            {levelInfo.description}\n          </p>\n          \n          {score !== undefined && (\n            <div className=\"verification-score-text\">\n              Verification Score: <span style={{ color: levelInfo.color }}>{Math.round(score * 100)}%</span>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default VerificationStatusIndicator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}