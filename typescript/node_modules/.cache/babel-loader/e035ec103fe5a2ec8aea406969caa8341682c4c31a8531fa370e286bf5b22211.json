{"ast":null,"code":"/**\n * TypeScript interface definitions for Hydra News content structures\n */\n\n// Entity extracted from content\n\n// Factual claim extracted from content\n\n// Cross-reference information\n\n// Verification status for a claim\n\n// Verification result from the consensus network\n\n// News content item\n\n// Verification levels\nexport let VerificationLevel = /*#__PURE__*/function (VerificationLevel) {\n  VerificationLevel[VerificationLevel[\"None\"] = 0] = \"None\";\n  VerificationLevel[VerificationLevel[\"Minimal\"] = 1] = \"Minimal\";\n  VerificationLevel[VerificationLevel[\"Standard\"] = 2] = \"Standard\";\n  VerificationLevel[VerificationLevel[\"High\"] = 3] = \"High\";\n  VerificationLevel[VerificationLevel[\"Maximum\"] = 4] = \"Maximum\";\n  return VerificationLevel;\n}({});\n\n// Verification level details\n\nexport const verificationLevels = [{\n  level: VerificationLevel.None,\n  name: 'None',\n  color: '#e74c3c',\n  description: 'This content has not been verified'\n}, {\n  level: VerificationLevel.Minimal,\n  name: 'Minimal',\n  color: '#e67e22',\n  description: 'Basic verification with limited cross-referencing'\n}, {\n  level: VerificationLevel.Standard,\n  name: 'Standard',\n  color: '#f1c40f',\n  description: 'Standard verification with multiple sources'\n}, {\n  level: VerificationLevel.High,\n  name: 'High',\n  color: '#2ecc71',\n  description: 'High level of verification with extensive cross-referencing'\n}, {\n  level: VerificationLevel.Maximum,\n  name: 'Maximum',\n  color: '#27ae60',\n  description: 'Maximum verification with cryptographic proof and multiple trusted sources'\n}];","map":{"version":3,"names":["VerificationLevel","verificationLevels","level","None","name","color","description","Minimal","Standard","High","Maximum"],"sources":["/home/ubuntu/hydra-news/typescript/src/types/NewsContent.ts"],"sourcesContent":["/**\n * TypeScript interface definitions for Hydra News content structures\n */\n\n// Entity extracted from content\nexport interface ContentEntity {\n  name: string;\n  type: string;\n  context: string;\n  confidence: number;\n  position: {\n    start: number;\n    end: number;\n  };\n}\n\n// Factual claim extracted from content\nexport interface ContentClaim {\n  id: string;\n  text: string;\n  entities: ContentEntity[];\n  source_text: string;\n  confidence: number;\n  type: string;\n  position: {\n    start: number;\n    end: number;\n  };\n}\n\n// Cross-reference information\nexport interface CrossReference {\n  url: string;\n  title: string;\n  source: string;\n  content_hash: string;\n  support_score?: number;\n  dispute_score?: number;\n}\n\n// Verification status for a claim\nexport interface VerifiedClaim {\n  claim_id: string;\n  text: string;\n  score: number;\n  supporting_references?: CrossReference[];\n  disputed_by?: CrossReference[];\n}\n\n// Verification result from the consensus network\nexport interface VerificationResult {\n  content_hash: string;\n  verification_score: number;\n  verified_claims: VerifiedClaim[];\n  disputed_claims: VerifiedClaim[];\n  references: CrossReference[];\n  timestamp: string;\n}\n\n// News content item\nexport interface NewsContent {\n  title: string;\n  content: string;\n  source: string;\n  url?: string;\n  author?: string;\n  publish_date?: string;\n  content_hash: string;\n  entities?: ContentEntity[];\n  claims?: ContentClaim[];\n  entanglement_hash?: string;\n  processed: boolean;\n  verification_result?: VerificationResult;\n  verification_level?: number;\n}\n\n// Verification levels\nexport enum VerificationLevel {\n  None = 0,\n  Minimal = 1,\n  Standard = 2,\n  High = 3,\n  Maximum = 4\n}\n\n// Verification level details\nexport interface VerificationLevelInfo {\n  level: VerificationLevel;\n  name: string;\n  color: string;\n  description: string;\n}\n\nexport const verificationLevels: VerificationLevelInfo[] = [\n  { \n    level: VerificationLevel.None, \n    name: 'None', \n    color: '#e74c3c', \n    description: 'This content has not been verified' \n  },\n  { \n    level: VerificationLevel.Minimal, \n    name: 'Minimal', \n    color: '#e67e22', \n    description: 'Basic verification with limited cross-referencing' \n  },\n  { \n    level: VerificationLevel.Standard, \n    name: 'Standard', \n    color: '#f1c40f', \n    description: 'Standard verification with multiple sources' \n  },\n  { \n    level: VerificationLevel.High, \n    name: 'High', \n    color: '#2ecc71', \n    description: 'High level of verification with extensive cross-referencing' \n  },\n  { \n    level: VerificationLevel.Maximum, \n    name: 'Maximum', \n    color: '#27ae60', \n    description: 'Maximum verification with cryptographic proof and multiple trusted sources' \n  }\n];\n"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAYA;;AAcA;;AAUA;;AASA;;AAUA;;AAiBA;AACA,WAAYA,iBAAiB,0BAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;;AAQ7B;;AAQA,OAAO,MAAMC,kBAA2C,GAAG,CACzD;EACEC,KAAK,EAAEF,iBAAiB,CAACG,IAAI;EAC7BC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,SAAS;EAChBC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,KAAK,EAAEF,iBAAiB,CAACO,OAAO;EAChCH,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE,SAAS;EAChBC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,KAAK,EAAEF,iBAAiB,CAACQ,QAAQ;EACjCJ,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE,SAAS;EAChBC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,KAAK,EAAEF,iBAAiB,CAACS,IAAI;EAC7BL,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,SAAS;EAChBC,WAAW,EAAE;AACf,CAAC,EACD;EACEJ,KAAK,EAAEF,iBAAiB,CAACU,OAAO;EAChCN,IAAI,EAAE,SAAS;EACfC,KAAK,EAAE,SAAS;EAChBC,WAAW,EAAE;AACf,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}