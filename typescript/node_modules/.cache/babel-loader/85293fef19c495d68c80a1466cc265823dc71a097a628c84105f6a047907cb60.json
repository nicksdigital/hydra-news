{"ast":null,"code":"/**\n * API Service for Hydra News\n * \n * This service handles all communication with the backend API,\n * including content submission, verification, and retrieval.\n */\n\n// API endpoints\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';\nconst ENDPOINTS = {\n  SUBMIT_CONTENT: `${API_BASE_URL}/api/content/submit`,\n  VERIFY_CONTENT: `${API_BASE_URL}/api/content/verify`,\n  GET_CONTENT: `${API_BASE_URL}/api/content`,\n  GET_VERIFICATION: `${API_BASE_URL}/api/verification`,\n  CROSS_REFERENCE: `${API_BASE_URL}/api/content/cross-reference`\n};\n\n/**\n * Submit news content for processing and verification\n * @param content The news content to submit\n * @returns The processed content with hash and entanglement\n */\nexport const submitContent = async content => {\n  try {\n    const response = await fetch(ENDPOINTS.SUBMIT_CONTENT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    });\n    if (!response.ok) {\n      throw new Error(`Error submitting content: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error submitting content:', error);\n    throw error;\n  }\n};\n\n/**\n * Request verification for a content item\n * @param contentHash The hash of the content to verify\n * @param crossReferenceUrls Optional URLs to use for cross-referencing\n * @returns The verification result\n */\nexport const verifyContent = async (contentHash, crossReferenceUrls) => {\n  try {\n    const response = await fetch(ENDPOINTS.VERIFY_CONTENT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        content_hash: contentHash,\n        reference_urls: crossReferenceUrls || []\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error verifying content: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error verifying content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get content by hash\n * @param contentHash The hash of the content to retrieve\n * @returns The content item\n */\nexport const getContent = async contentHash => {\n  try {\n    const response = await fetch(`${ENDPOINTS.GET_CONTENT}/${contentHash}`);\n    if (!response.ok) {\n      throw new Error(`Error retrieving content: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get verification result for content\n * @param contentHash The hash of the content to get verification for\n * @returns The verification result\n */\nexport const getVerification = async contentHash => {\n  try {\n    const response = await fetch(`${ENDPOINTS.GET_VERIFICATION}/${contentHash}`);\n    if (!response.ok) {\n      throw new Error(`Error retrieving verification: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving verification:', error);\n    throw error;\n  }\n};\n\n/**\n * Cross-reference content with other sources\n * @param contentHash The hash of the content to cross-reference\n * @param urls URLs to use for cross-referencing\n * @returns The verification result with cross-references\n */\nexport const crossReferenceContent = async (contentHash, urls) => {\n  try {\n    const response = await fetch(ENDPOINTS.CROSS_REFERENCE, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        content_hash: contentHash,\n        reference_urls: urls\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error cross-referencing content: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error cross-referencing content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get recent news content items\n * @param limit Maximum number of items to return\n * @returns Array of news content items\n */\nexport const getRecentContent = async (limit = 10) => {\n  try {\n    const response = await fetch(`${ENDPOINTS.GET_CONTENT}?limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(`Error retrieving recent content: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving recent content:', error);\n    throw error;\n  }\n};\n\n/**\n * Search for content by keywords\n * @param query The search query\n * @param limit Maximum number of items to return\n * @returns Array of matching news content items\n */\nexport const searchContent = async (query, limit = 10) => {\n  try {\n    const response = await fetch(`${ENDPOINTS.GET_CONTENT}/search?q=${encodeURIComponent(query)}&limit=${limit}`);\n    if (!response.ok) {\n      throw new Error(`Error searching content: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error searching content:', error);\n    throw error;\n  }\n};\n\n/**\n * Upload a file URL for content extraction\n * @param url The URL to extract content from\n * @returns The extracted content\n */\nexport const extractContentFromUrl = async url => {\n  try {\n    const response = await fetch(`${ENDPOINTS.SUBMIT_CONTENT}/extract`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        url\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error extracting content: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error extracting content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get trust score for a source\n * @param source The source name or domain\n * @returns The trust score (0-1)\n */\nexport const getSourceTrustScore = async source => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sources/trust-score/${encodeURIComponent(source)}`);\n    if (!response.ok) {\n      throw new Error(`Error retrieving source trust score: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return data.score;\n  } catch (error) {\n    console.error('Error retrieving source trust score:', error);\n    throw error;\n  }\n};\n\n/**\n * Get the verification status of the system\n * @returns Object containing system status information\n */\nexport const getSystemStatus = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/system/status`);\n    if (!response.ok) {\n      throw new Error(`Error retrieving system status: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving system status:', error);\n    throw error;\n  }\n};\nexport default {\n  submitContent,\n  verifyContent,\n  getContent,\n  getVerification,\n  crossReferenceContent,\n  getRecentContent,\n  searchContent,\n  extractContentFromUrl,\n  getSourceTrustScore,\n  getSystemStatus\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_BASE_URL","ENDPOINTS","SUBMIT_CONTENT","VERIFY_CONTENT","GET_CONTENT","GET_VERIFICATION","CROSS_REFERENCE","submitContent","content","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","json","error","console","verifyContent","contentHash","crossReferenceUrls","content_hash","reference_urls","getContent","getVerification","crossReferenceContent","urls","getRecentContent","limit","searchContent","query","encodeURIComponent","extractContentFromUrl","url","getSourceTrustScore","source","data","score","getSystemStatus"],"sources":["/home/ubuntu/hydra-news/typescript/src/services/ApiService.ts"],"sourcesContent":["/**\n * API Service for Hydra News\n * \n * This service handles all communication with the backend API,\n * including content submission, verification, and retrieval.\n */\n\nimport { NewsContent, VerificationResult } from '../types/NewsContent';\n\n// API endpoints\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://localhost:8080';\nconst ENDPOINTS = {\n  SUBMIT_CONTENT: `${API_BASE_URL}/api/content/submit`,\n  VERIFY_CONTENT: `${API_BASE_URL}/api/content/verify`,\n  GET_CONTENT: `${API_BASE_URL}/api/content`,\n  GET_VERIFICATION: `${API_BASE_URL}/api/verification`,\n  CROSS_REFERENCE: `${API_BASE_URL}/api/content/cross-reference`,\n};\n\n/**\n * Submit news content for processing and verification\n * @param content The news content to submit\n * @returns The processed content with hash and entanglement\n */\nexport const submitContent = async (content: Partial<NewsContent>): Promise<NewsContent> => {\n  try {\n    const response = await fetch(ENDPOINTS.SUBMIT_CONTENT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(content),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error submitting content: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error submitting content:', error);\n    throw error;\n  }\n};\n\n/**\n * Request verification for a content item\n * @param contentHash The hash of the content to verify\n * @param crossReferenceUrls Optional URLs to use for cross-referencing\n * @returns The verification result\n */\nexport const verifyContent = async (\n  contentHash: string,\n  crossReferenceUrls?: string[]\n): Promise<VerificationResult> => {\n  try {\n    const response = await fetch(ENDPOINTS.VERIFY_CONTENT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        content_hash: contentHash,\n        reference_urls: crossReferenceUrls || [],\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error verifying content: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error verifying content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get content by hash\n * @param contentHash The hash of the content to retrieve\n * @returns The content item\n */\nexport const getContent = async (contentHash: string): Promise<NewsContent> => {\n  try {\n    const response = await fetch(`${ENDPOINTS.GET_CONTENT}/${contentHash}`);\n\n    if (!response.ok) {\n      throw new Error(`Error retrieving content: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get verification result for content\n * @param contentHash The hash of the content to get verification for\n * @returns The verification result\n */\nexport const getVerification = async (contentHash: string): Promise<VerificationResult> => {\n  try {\n    const response = await fetch(`${ENDPOINTS.GET_VERIFICATION}/${contentHash}`);\n\n    if (!response.ok) {\n      throw new Error(`Error retrieving verification: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving verification:', error);\n    throw error;\n  }\n};\n\n/**\n * Cross-reference content with other sources\n * @param contentHash The hash of the content to cross-reference\n * @param urls URLs to use for cross-referencing\n * @returns The verification result with cross-references\n */\nexport const crossReferenceContent = async (\n  contentHash: string,\n  urls: string[]\n): Promise<VerificationResult> => {\n  try {\n    const response = await fetch(ENDPOINTS.CROSS_REFERENCE, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        content_hash: contentHash,\n        reference_urls: urls,\n      }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error cross-referencing content: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error cross-referencing content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get recent news content items\n * @param limit Maximum number of items to return\n * @returns Array of news content items\n */\nexport const getRecentContent = async (limit: number = 10): Promise<NewsContent[]> => {\n  try {\n    const response = await fetch(`${ENDPOINTS.GET_CONTENT}?limit=${limit}`);\n\n    if (!response.ok) {\n      throw new Error(`Error retrieving recent content: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving recent content:', error);\n    throw error;\n  }\n};\n\n/**\n * Search for content by keywords\n * @param query The search query\n * @param limit Maximum number of items to return\n * @returns Array of matching news content items\n */\nexport const searchContent = async (\n  query: string,\n  limit: number = 10\n): Promise<NewsContent[]> => {\n  try {\n    const response = await fetch(\n      `${ENDPOINTS.GET_CONTENT}/search?q=${encodeURIComponent(query)}&limit=${limit}`\n    );\n\n    if (!response.ok) {\n      throw new Error(`Error searching content: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error searching content:', error);\n    throw error;\n  }\n};\n\n/**\n * Upload a file URL for content extraction\n * @param url The URL to extract content from\n * @returns The extracted content\n */\nexport const extractContentFromUrl = async (url: string): Promise<Partial<NewsContent>> => {\n  try {\n    const response = await fetch(`${ENDPOINTS.SUBMIT_CONTENT}/extract`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error extracting content: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error extracting content:', error);\n    throw error;\n  }\n};\n\n/**\n * Get trust score for a source\n * @param source The source name or domain\n * @returns The trust score (0-1)\n */\nexport const getSourceTrustScore = async (source: string): Promise<number> => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/sources/trust-score/${encodeURIComponent(source)}`);\n\n    if (!response.ok) {\n      throw new Error(`Error retrieving source trust score: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n    return data.score;\n  } catch (error) {\n    console.error('Error retrieving source trust score:', error);\n    throw error;\n  }\n};\n\n/**\n * Get the verification status of the system\n * @returns Object containing system status information\n */\nexport const getSystemStatus = async (): Promise<{\n  activeNodes: number;\n  verifiedContent: number;\n  averageVerificationTime: number;\n  systemHealth: string;\n}> => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/system/status`);\n\n    if (!response.ok) {\n      throw new Error(`Error retrieving system status: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Error retrieving system status:', error);\n    throw error;\n  }\n};\n\nexport default {\n  submitContent,\n  verifyContent,\n  getContent,\n  getVerification,\n  crossReferenceContent,\n  getRecentContent,\n  searchContent,\n  extractContentFromUrl,\n  getSourceTrustScore,\n  getSystemStatus,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}